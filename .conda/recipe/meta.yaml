{% set oot_name = "inspector" %}
{% set name = "gnuradio-" + oot_name %}
{% set version = (environ.get("GIT_DESCRIBE_TAG_PEP440", "0.0.0." + datetime.datetime.now().strftime("%Y%m%d") + ".dev+" + environ.get("GIT_DESCRIBE_HASH", "local"))|string) %}

package:
  name: {{ name|lower }}
  version: {{ version }}

source:
  # use local path or git repository depending on if the build is local or done on CI
  path: "../.."  # [not os.environ.get("CI")]
  git_url: {{ environ.get('FEEDSTOCK_ROOT', "../..") }}  # [os.environ.get("CI")]

build:
  number: 0
  skip: true  # [ppc64le]

requirements:
  build:
    - {{ compiler("c") }}
    - {{ compiler("cxx") }}
    - cmake
    - git
    - ninja
    - pkg-config
    # cross-compilation requirements
    - python                              # [build_platform != target_platform]
    - cross-python_{{ target_platform }}  # [build_platform != target_platform]
    - numpy                               # [build_platform != target_platform]
    - pybind11                            # [build_platform != target_platform]
    # Add extra build tool dependencies here
    # below are needed to link with Qt
    - {{ cdt('libice') }}  # [linux]
    - {{ cdt('libselinux') }}  # [linux]
    - {{ cdt('libsm') }}  # [linux]
    - {{ cdt('libx11') }}  # [linux]
    - {{ cdt('libxau') }}  # [linux]
    - {{ cdt('libxcb') }}  # [linux]
    - {{ cdt('libxdamage') }}  # [linux]
    - {{ cdt('libxext') }}  # [linux]
    - {{ cdt('libxfixes') }}  # [linux]
    - {{ cdt('libxrender') }}  # [linux]
    - {{ cdt('libxxf86vm') }}  # [linux]
    - {{ cdt('libuuid') }}  # [linux]
    - {{ cdt('mesa-dri-drivers') }}  # [linux]
    - {{ cdt('mesa-libgl-devel') }}  # [linux]

  host:
    - gmp  # [linux]
    # the following two entries are for generating builds against specific GR versions
    - gnuradio-core  # [not gnuradio_extra_pin]
    - gnuradio-core {{ gnuradio_extra_pin }}.*  # [gnuradio_extra_pin]
    - gnuradio-qtgui
    - pip  # [win]
    - pybind11
    - python
    - numpy
    - spdlog
    - volk
    # Add/remove library dependencies here
    - pyqt
    - qt-main
    - qwt

  run:
    - numpy
    - python
    # Add/remove runtime dependencies here
    - gnuradio-qtgui
    - pyqt
    - {{ pin_compatible('qwt', max_pin='x.x') }}

test:
  commands:
    # verify that (some) headers get installed
    - test -f $PREFIX/include/gnuradio/{{ oot_name }}/api.h  # [not win]
    - if not exist %PREFIX%\\Library\\include\\gnuradio\\{{ oot_name }}\\api.h exit 1  # [win]

    # verify that libraries get installed
    - test -f $PREFIX/lib/lib{{ name }}${SHLIB_EXT}  # [not win]
    - if not exist %PREFIX%\\Library\\bin\\{{ name }}.dll exit 1  # [win]
    - if not exist %PREFIX%\\Library\\lib\\{{ name }}.lib exit 1  # [win]

    # verify that (some) GRC blocks get installed
    {% set blocks = ["inspector_ofdm_synchronizer_cc", "inspector_ofdm_zkf_c", "inspector_qtgui_inspector_sink_vf", "inspector_signal_detector_cvf", "inspector_signal_extractor_c", "inspector_signal_separator_c"] %}
    {% for block in blocks %}
    - test -f $PREFIX/share/gnuradio/grc/blocks/{{ block }}.block.yml  # [not win]
    - if not exist %PREFIX%\\Library\\share\\gnuradio\\grc\\blocks\\{{ block }}.block.yml exit 1  # [win]
    {% endfor %}

  imports:
    # verify that the python module imports
    - gnuradio.{{ oot_name }}

about:
  # For licenses, use the SPDX identifier, e.g: "GPL-2.0-only" instead of
  # "GNU General Public License version 2.0". See https://spdx.org/licenses/.
  # Include the license text by using the license_file entry set to the path
  # of the license text file within the source directory, e.g. "LICENSE".
  # See https://docs.conda.io/projects/conda-build/en/latest/resources/define-metadata.html#license-file

  home: https://github.com/gnuradio/gr-inspector
  license: GPL-3.0-or-later
  license_file: LICENSE
  summary: GNU Radio signal analysis toolbox
  description: >
    This GNU Radio module is developed to realize signal analysis abilities
    in typical block-structure. The module is capable of the following:

        Energy detection of continuous signals
        Filtering of detected signals
        OFDM parameter estimation (carrier spacing, symbol time)
        Blind OFDM synchronization
        Resampling of signals to constant rate
